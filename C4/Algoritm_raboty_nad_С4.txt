1. Внимательно прочитать условие задачи (один раз, но внимательно), выделить основу вопроса (что нужно сделать). Примеры пока не смотреть. 
Результат:
reference.jpg - картинка, на которой синим выделено то, что относится к входным данным, зеленым то, что относится к выходным данным

2. Получить выходные данные (на бумаге или в mspaint) для примера из задачи, не подсматривая в ответ и не используя калькулятор.
Результат:
example.jpg - картинка со схемой работы алгоритма, анализом входных данных, вспомогательными вычислениями и предполагаемыми выходными данными

3. Если полученные в пункте 2. выходные данные не совпадают с приведенными в задаче, то переходим к пункту 1

4. Подготовить механизм тестирования решения полным перебором. Для этого сохранить выходные и входные данные примера из условий задачи в папке tests и написать (скопировать батник).
Результат:
  а. tests/00 и tests/00.a
  б. full_search.bat

5. Реализовать и отладить на примере из задачи решение полным перебором (c нуля, не копируя код из других задач)
  а. реализовать и отладить ввод данных и сохранение их в массиве      (осмысленно подобрать типы данных) 
  б. реализовать и отладить алгоритм перебора
  в. реализовать и отладить вывод выходных данных
  г. закомментировать в программе организацию ввода из файла tests/00 и      отладить программу с помощью full_search.bat
Результат:
  а. full_search.lpi - файл проекта
  б. full_search.lpr - файл с кодом
  в. full_search.bat запускается и говорит, что отличий не найдено

6. Реализовать и отладить программу, помогающую найти оптимальный алгоритм, которая заполняет входные данные случайными числами (размеры задаются константами), выводит их на экран, ждет от пользователя название файла с тестом, вычисляет и выводит на экран ответ, полученный полным перебором, записывает входные и выходные данные в соответствующие файлы.
Результат:
  а. helper.lpi - файл проекта
  b. helper.lpr - файл с кодом
  с. проект запускается из среды Lazarus и выполняет свои функции

7. Придумать алгоритм оптимального решения. Для этого запускать проект helper последовательно увеличивая размеры входных данных, каждый раз получая ответ аналитически (на бумаге), записывая промежуточные действия.
Результат:
  а. optimal.txt - файл с кратким описанием алгоритма 
  б. optimal.jpg - картинка с входными данные, полученными в результате          последовательного      увеличения их размеров, а также ответами и           записями промежуточных      вычислений
  в. 01 и 01.a, 02 и 02.a и т.д. - тесты, созданные во время придумывания        оптимального алгоритма
  г. helper.lpr - размеры входных данных берутся из командной строки
  д. helper.bat - компилирует и запускает программу с размерами, на которых      был найден оптимальный алгоритм

8. Реализовать и отладить на примере из задачи оптимальное решение (c нуля, не копируя код из других задач)
  а. реализовать и отладить ввод данных
  б. реализовать и отладить оптимальный алгоритм
  в. реализовать и отладить вывод выходных данных
  г. закомментировать в программе организацию ввода из файла tests/00 и          отладить программу с помощью optimal.bat
Результат:
  а. optimal.lpi - файл проекта
  б. optimal.lpr - файл с кодом
  в. optimal.bat запускается и говорит, что отличий не найдено
9. Провести тестирование оптимального алгоритма, многократным сравнением результата его работы с результатом работы алгоритма полного перебора на случайных данных.
  а. реализовать и отладить заполнение массива длины N случайными данными
  б. в функцию full_search() скопировать один в один алгоритм из проекта full_search
  в. в функцию optimal() скопировать один в один алгоритм из проекта optimal
  г. реализовать многократное сравнение full_search() и optimal()
Результат:
  а. test.lpi - файл проекта
  б. test.lpr - файл с кодом 
  в. test.bat запускается, отрабатывает, говорит, что закончил тестирование и если есть расхождения, показывает их
